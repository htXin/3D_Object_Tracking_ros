// Generated by gencpp from file fusion_model/detection_object_array.msg
// DO NOT EDIT!


#ifndef FUSION_MODEL_MESSAGE_DETECTION_OBJECT_ARRAY_H
#define FUSION_MODEL_MESSAGE_DETECTION_OBJECT_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fusion_model/detection_object.h>

namespace fusion_model
{
template <class ContainerAllocator>
struct detection_object_array_
{
  typedef detection_object_array_<ContainerAllocator> Type;

  detection_object_array_()
    : header()
    , detection_objects()
    , frame_det_id(0)
    , seq_id()  {
    }
  detection_object_array_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detection_objects(_alloc)
    , frame_det_id(0)
    , seq_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::fusion_model::detection_object_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fusion_model::detection_object_<ContainerAllocator> >::other >  _detection_objects_type;
  _detection_objects_type detection_objects;

   typedef uint32_t _frame_det_id_type;
  _frame_det_id_type frame_det_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _seq_id_type;
  _seq_id_type seq_id;





  typedef boost::shared_ptr< ::fusion_model::detection_object_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fusion_model::detection_object_array_<ContainerAllocator> const> ConstPtr;

}; // struct detection_object_array_

typedef ::fusion_model::detection_object_array_<std::allocator<void> > detection_object_array;

typedef boost::shared_ptr< ::fusion_model::detection_object_array > detection_object_arrayPtr;
typedef boost::shared_ptr< ::fusion_model::detection_object_array const> detection_object_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fusion_model::detection_object_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fusion_model::detection_object_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fusion_model::detection_object_array_<ContainerAllocator1> & lhs, const ::fusion_model::detection_object_array_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.detection_objects == rhs.detection_objects &&
    lhs.frame_det_id == rhs.frame_det_id &&
    lhs.seq_id == rhs.seq_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fusion_model::detection_object_array_<ContainerAllocator1> & lhs, const ::fusion_model::detection_object_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fusion_model

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fusion_model::detection_object_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion_model::detection_object_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion_model::detection_object_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion_model::detection_object_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion_model::detection_object_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion_model::detection_object_array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fusion_model::detection_object_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddcbfbfcf26ff58a278daeb743c6d53d";
  }

  static const char* value(const ::fusion_model::detection_object_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddcbfbfcf26ff58aULL;
  static const uint64_t static_value2 = 0x278daeb743c6d53dULL;
};

template<class ContainerAllocator>
struct DataType< ::fusion_model::detection_object_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion_model/detection_object_array";
  }

  static const char* value(const ::fusion_model::detection_object_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fusion_model::detection_object_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"detection_object[] detection_objects\n"
"uint32 frame_det_id\n"
"string seq_id\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fusion_model/detection_object\n"
"Header header #header timestamp is time of frame acquisition\n"
"string type # type of object(pedestrian:1,car:2,cyclist:3)\n"
"\n"
"string x1  \n"
"string y1 \n"
"string x2 \n"
"string y2 \n"
"\n"
"string score\n"
"\n"
"string x # x coordinate of the center of the bottom face of the bounding box\n"
"string y # y coordinate of the center of the bottom face of the bounding box\n"
"string z # x coordinate of the center of the bottom face of the bounding box\n"
"string l # size of bounding box along x dimension\n"
"string h # size of bounding box along y dimension\n"
"string w # size of bounding box along z dimension\n"
"string rot_y # rotation of bounding box with respect to the positive x axis\n"
"\n"
"string ori_tmp\n"
"uint32 object_id\n"
;
  }

  static const char* value(const ::fusion_model::detection_object_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fusion_model::detection_object_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detection_objects);
      stream.next(m.frame_det_id);
      stream.next(m.seq_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detection_object_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fusion_model::detection_object_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion_model::detection_object_array_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detection_objects[]" << std::endl;
    for (size_t i = 0; i < v.detection_objects.size(); ++i)
    {
      s << indent << "  detection_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fusion_model::detection_object_<ContainerAllocator> >::stream(s, indent + "    ", v.detection_objects[i]);
    }
    s << indent << "frame_det_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_det_id);
    s << indent << "seq_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.seq_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSION_MODEL_MESSAGE_DETECTION_OBJECT_ARRAY_H
